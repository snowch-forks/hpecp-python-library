<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="820f677a-811f-44c7-9ea7-677cee198bf8" activeEnvironment="Default" name="REST Project 1" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="972ae77c-f8e4-48bf-96ab-132c3be2ef14" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://ChrisMBP.lan:8080/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="" path="/api/v1" id="e06feb44-fd5e-4c2c-9d3b-35e77ab5af53"><con:settings/><con:parameters/><con:resource name="role" path="role" id="cfef3df8-9818-44c8-917b-090c9d0a2514"><con:settings/><con:parameters/><con:method name="Get" id="9f283ead-f374-42a7-97d2-1dbe31173a7a" method="GET"><con:settings/><con:parameters/><con:request name="Request" id="58b3f2a0-64e6-49df-9972-a2185e81b158" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ChrisMBP.lan:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Get role by ID" id="821331f7-0ae7-459d-a0d8-8f26950500c7" method="GET"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Request" id="21f1ff79-c88b-480e-92d8-d3827d7d5842" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ChrisMBP.lan:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="login" path="login" id="b3da979b-fb03-4f5f-93a1-1359acd6bddf"><con:settings/><con:parameters/><con:method name="Post" id="77ed114e-4732-41fe-90e5-e8b59c698f42" method="POST"><con:settings/><con:parameters/><con:request name="Request" id="463f6eeb-b0cd-4cb7-82ca-bd01b57c9f7c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ChrisMBP.lan:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="license" path="license" id="bf597851-d214-480a-a908-3be0cc2e6a92"><con:settings/><con:parameters/><con:method name="Get" id="d9de5525-c9e3-4130-9973-999d83c1f2cd" method="GET"><con:settings/><con:parameters/><con:request name="Request" id="a8e3e3ef-19b8-4041-9631-1fe27cb5db6d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ChrisMBP.lan:8080/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:restMockService id="8be56fa0-eb7e-4788-bad2-0f00290f00b5" port="8080" path="/" host="ChrisMBP.lan" name="REST MockService"><con:settings/><con:properties/><con:restMockAction name="/api/v1/role" method="GET" resourcePath="/api/v1/role" id="5247f076-493d-45a4-8e0b-20ebc9e89e73"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if ( requestPath.endsWith('/1') ) {
	return "Role by ID 1 = success"
}

if ( requestPath.endsWith('/99') ) {
	return "Role by ID 99 = not found"
}

// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString


/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success Reponse" id="c2e01668-af95-4107-a0ee-e7e3bb76f9cd" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "_links": {
    "self": {
      "href": "/api/v1/role"
    }
  },
  "_embedded": {
    "roles": [
      {
        "_links": {
          "self": {
            "href": "/api/v1/role/1"
          }
        },
        "label": {
          "name": "Site Admin",
          "description": "Role for Site Admin"
        }
      },
      {
        "_links": {
          "self": {
            "href": "/api/v1/role/4"
          }
        },
        "label": {
          "name": "K8S Admin",
          "description": "Role for Kubernetes Admin"
        }
      },
      {
        "_links": {
          "self": {
            "href": "/api/v1/role/3"
          }
        },
        "label": {
          "name": "Member",
          "description": "Role for Tenant Member"
        }
      },
      {
        "_links": {
          "self": {
            "href": "/api/v1/role/2"
          }
        },
        "label": {
          "name": "Admin",
          "description": "Role for Tenant Admin"
        }
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Role by ID 1 = success" id="0b2fe989-4997-47bd-a6f8-b582752d56f4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "_links": {
    "self": {
      "href": "/api/v1/role/1"
    },
    "all_roles": {
      "href": "/api/v1/role"
    }
  },
  "label": {
    "name": "Site Admin",
    "description": "Role for Site Admin"
  }
}</con:responseContent></con:response><con:response name="Role by ID 99 = not found" id="4f40757f-fb4e-4480-b915-90e19dead7d3" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/v1/login" method="POST" resourcePath="/api/v1/login" id="94c2c60a-16e6-4fc9-b320-6d05001cf054"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

import groovy.json.JsonSlurper


def json = new JsonSlurper().parseText(mockRequest.getRequestContent())
log.info json
	

if ( json.name == 'admin' ) {
	return "Login Success Response"
} else {
	return "Login Failed Response"
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Login Success Response" id="64361075-ae39-4ed8-8fbd-e837ad26e2bf" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/><con:header><con:name>location</con:name><con:value>/api/v1/session/df1bfacb-xxxx-xxxx-xxxx-c8f57d8f3c7</con:value></con:header></con:response><con:response name="Login Failed Reponse" id="30731a63-ba64-41c1-820d-fbee088e4023" httpResponseStatus="401"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/v1/license" method="GET" resourcePath="/api/v1/license" id="777458a5-c2f1-434f-bc62-93536aec73b0"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success Response" id="99316eed-7a8f-43b6-8b94-14c737654ed9" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>